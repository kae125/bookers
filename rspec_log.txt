
Book モデルに関するテスト
  実際に保存してみる
    有効な投稿内容の場合は保存されるか
  空白のバリデーションチェック
    titleが空白の場合にバリデーションチェックされ空白のエラーメッセージが返ってきているか (FAILED - 1)
    bodyが空白の場合にバリデーションチェックされ空白のエラーメッセージが返ってきているか (FAILED - 2)
  titleを空白で投稿した場合に画面にエラーメッセージが表示されているか
    エラーメッセージは正しく表示されるか (FAILED - 3)
  bodyを空白で投稿した場合に画面にエラーメッセージが表示されているか
    エラーメッセージは正しく表示されるか (FAILED - 4)

投稿のテスト
  トップ画面(root_path)のテスト
    表示の確認
      トップ画面(root_path)に一覧ページへのリンクが表示されているか
      root_pathが"/"であるか
  一覧画面のテスト
    一覧の表示とリンクの確認
      bookの一覧表示(tableタグ)と投稿フォームが同一画面に表示されているか
      bookのタイトルと感想を表示し、詳細・編集・削除のリンクが表示されているか
      Create Bookボタンが表示される
    投稿処理に関するテスト
      投稿に成功しサクセスメッセージが表示されるか
      投稿に失敗する
      投稿後のリダイレクト先は正しいか
    book削除のテスト
      application.html.erbにjavascript_pack_tagを含んでいるか
      bookの削除
  詳細画面のテスト
    表示の確認
      本のタイトルと感想が画面に表示されていること
      Editリンクが表示される
      Backリンクが表示される
    リンクの遷移先の確認
      Editの遷移先は編集画面か
      Backの遷移先は一覧画面か (FAILED - 5)
  編集画面のテスト
    表示の確認
      編集前のタイトルと感想がフォームに表示(セット)されている
      Update Bookボタンが表示される
      Showリンクが表示される
      Backリンクが表示される
    リンクの遷移先の確認
      Showの遷移先は詳細画面か
      Backの遷移先は一覧画面か (FAILED - 6)
    更新処理に関するテスト
      更新に成功しサクセスメッセージが表示されるか
      更新に失敗しエラーメッセージが表示されるか (FAILED - 7)
      更新後のリダイレクト先は正しいか

Failures:

  1) Book モデルに関するテスト 空白のバリデーションチェック titleが空白の場合にバリデーションチェックされ空白のエラーメッセージが返ってきているか
     Failure/Error: expect(book.errors[:title]).to include("can't be blank")
       expected #<ActiveModel::DeprecationHandlingMessageArray(["error: Title cannott be blank."])> to include "can't be blank"
     # ./spec/models/book_spec.rb:15:in `block (3 levels) in <top (required)>'

  2) Book モデルに関するテスト 空白のバリデーションチェック bodyが空白の場合にバリデーションチェックされ空白のエラーメッセージが返ってきているか
     Failure/Error: expect(book.errors[:body]).to include("can't be blank")
       expected #<ActiveModel::DeprecationHandlingMessageArray(["error: Body cannot be blank."])> to include "can't be blank"
     # ./spec/models/book_spec.rb:20:in `block (3 levels) in <top (required)>'

  3) Book モデルに関するテスト titleを空白で投稿した場合に画面にエラーメッセージが表示されているか エラーメッセージは正しく表示されるか
     Failure/Error: expect(page).to have_content "can't be blank"
       expected to find text "can't be blank" in "WebCampBackendNew\nBooks\nTitle Body\nNew book\nTitle error: Title cannott be blank.\nBody error: Body cannot be blank.\nTitle\nBody"
     # ./spec/models/book_spec.rb:30:in `block (3 levels) in <top (required)>'

  4) Book モデルに関するテスト bodyを空白で投稿した場合に画面にエラーメッセージが表示されているか エラーメッセージは正しく表示されるか
     Failure/Error: expect(page).to have_content "can't be blank"
       expected to find text "can't be blank" in "WebCampBackendNew\nBooks\nTitle Body\nNew book\nTitle error: Title cannott be blank.\nBody error: Body cannot be blank.\nTitle\nBody"
     # ./spec/models/book_spec.rb:40:in `block (3 levels) in <top (required)>'

  5) 投稿のテスト 詳細画面のテスト リンクの遷移先の確認 Backの遷移先は一覧画面か
     Failure/Error: expect(page).to have_current_path books_path
       expected "/books/index" to equal "/books"
     # ./spec/system/books_spec.rb:122:in `block (4 levels) in <main>'

  6) 投稿のテスト 編集画面のテスト リンクの遷移先の確認 Backの遷移先は一覧画面か
     Failure/Error: expect(page).to have_current_path books_path
       expected "/books/index" to equal "/books"
     # ./spec/system/books_spec.rb:156:in `block (4 levels) in <main>'

  7) 投稿のテスト 編集画面のテスト 更新処理に関するテスト 更新に失敗しエラーメッセージが表示されるか
     Failure/Error: expect(page).to have_content 'error'
       expected to find text "error" in "Book was successfully updated.\nTitle:hoge\nBody:body\nEdit Back"
     # ./spec/system/books_spec.rb:170:in `block (4 levels) in <main>'

Finished in 4.78 seconds (files took 6.72 seconds to load)
29 examples, 7 failures

Failed examples:

rspec ./spec/models/book_spec.rb:12 # Book モデルに関するテスト 空白のバリデーションチェック titleが空白の場合にバリデーションチェックされ空白のエラーメッセージが返ってきているか
rspec ./spec/models/book_spec.rb:17 # Book モデルに関するテスト 空白のバリデーションチェック bodyが空白の場合にバリデーションチェックされ空白のエラーメッセージが返ってきているか
rspec ./spec/models/book_spec.rb:28 # Book モデルに関するテスト titleを空白で投稿した場合に画面にエラーメッセージが表示されているか エラーメッセージは正しく表示されるか
rspec ./spec/models/book_spec.rb:38 # Book モデルに関するテスト bodyを空白で投稿した場合に画面にエラーメッセージが表示されているか エラーメッセージは正しく表示されるか
rspec ./spec/system/books_spec.rb:119 # 投稿のテスト 詳細画面のテスト リンクの遷移先の確認 Backの遷移先は一覧画面か
rspec ./spec/system/books_spec.rb:153 # 投稿のテスト 編集画面のテスト リンクの遷移先の確認 Backの遷移先は一覧画面か
rspec ./spec/system/books_spec.rb:166 # 投稿のテスト 編集画面のテスト 更新処理に関するテスト 更新に失敗しエラーメッセージが表示されるか

